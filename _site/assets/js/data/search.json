[
  
  {
    "title": "Laravel Best Practices",
    "url": "/posts/bestpractices/",
    "categories": "Laravel Developer, Web Development",
    "tags": "laravel, bestpractice, mvc",
    "date": "2023-01-21 10:42:00 +0300",
    





    
    "snippet": "Single responsibility principle  A class and a method should have only one responsibility.Bad:public function getFullNameAttribute(){    if (auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRo...",
    "content": "Single responsibility principle  A class and a method should have only one responsibility.Bad:public function getFullNameAttribute(){    if (auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRole('client') &amp;&amp; auth()-&gt;user()-&gt;isVerified()) {        return 'Mr. ' . $this-&gt;first_name . ' ' . $this-&gt;middle_name . ' ' . $this-&gt;last_name;    } else {        return $this-&gt;first_name[0] . '. ' . $this-&gt;last_name;    }}Good:public function getFullNameAttribute(): bool{    return $this-&gt;isVerifiedClient() ? $this-&gt;getFullNameLong() : $this-&gt;getFullNameShort();}public function isVerifiedClient(): bool{    return auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRole('client') &amp;&amp; auth()-&gt;user()-&gt;isVerified();}public function getFullNameLong(): string{    return 'Mr. ' . $this-&gt;first_name . ' ' . $this-&gt;middle_name . ' ' . $this-&gt;last_name;}public function getFullNameShort(): string{    return $this-&gt;first_name[0] . '. ' . $this-&gt;last_name;}Fat models, skinny controllers  Put all DB related logic into Eloquent models.Bad:public function index(){    $clients = Client::verified()        -&gt;with(['orders' =&gt; function ($q) {            $q-&gt;where('created_at', '&gt;', Carbon::today()-&gt;subWeek());        }])        -&gt;get();    return view('index', ['clients' =&gt; $clients]);}Good:public function index(){    return view('index', ['clients' =&gt; $this-&gt;client-&gt;getWithNewOrders()]);}class Client extends Model{    public function getWithNewOrders(): Collection    {        return $this-&gt;verified()            -&gt;with(['orders' =&gt; function ($q) {                $q-&gt;where('created_at', '&gt;', Carbon::today()-&gt;subWeek());            }])            -&gt;get();    }}Validation  Move validation from controllers to Request classes.Bad:public function store(Request $request){    $request-&gt;validate([        'title' =&gt; 'required|unique:posts|max:255',        'body' =&gt; 'required',        'publish_at' =&gt; 'nullable|date',    ]);    ....}Good:public function store(PostRequest $request){    ....}class PostRequest extends Request{    public function rules(): array    {        return [            'title' =&gt; 'required|unique:posts|max:255',            'body' =&gt; 'required',            'publish_at' =&gt; 'nullable|date',        ];    }}Business logic should be in service class  A controller must have only one responsibility, so move business logic from controllers to service classes.Bad:public function store(Request $request){    if ($request-&gt;hasFile('image')) {        $request-&gt;file('image')-&gt;move(public_path('images') . 'temp');    }    ....}Good:public function store(Request $request){    $this-&gt;articleService-&gt;handleUploadedImage($request-&gt;file('image'));    ....}class ArticleService{    public function handleUploadedImage($image): void    {        if (!is_null($image)) {            $image-&gt;move(public_path('images') . 'temp');        }    }}Don’t repeat yourself (DRY)  Reuse code when you can. SRP is helping you to avoid duplication. Also, reuse Blade templates, use Eloquent scopes etc.Bad:public function getActive(){    return $this-&gt;where('verified', 1)-&gt;whereNotNull('deleted_at')-&gt;get();}public function getArticles(){    return $this-&gt;whereHas('user', function ($q) {            $q-&gt;where('verified', 1)-&gt;whereNotNull('deleted_at');        })-&gt;get();}Good:public function scopeActive($q){    return $q-&gt;where('verified', true)-&gt;whereNotNull('deleted_at');}public function getActive(): Collection{    return $this-&gt;active()-&gt;get();}public function getArticles(): Collection{    return $this-&gt;whereHas('user', function ($q) {            $q-&gt;active();        })-&gt;get();}Prefer to use Eloquent over using Query Builder and raw SQL queries. Prefer collections over arrays  Eloquent allows you to write readable and maintainable code. Also, Eloquent has great built-in tools like soft deletes, events, scopes etc.Bad:SELECT *FROM `articles`WHERE EXISTS (SELECT *              FROM `users`              WHERE `articles`.`user_id` = `users`.`id`              AND EXISTS (SELECT *                          FROM `profiles`                          WHERE `profiles`.`user_id` = `users`.`id`)              AND `users`.`deleted_at` IS NULL)AND `verified` = '1'AND `active` = '1'ORDER BY `created_at` DESCGood:Article::has('user.profile')-&gt;verified()-&gt;latest()-&gt;get();Mass assignmentBad:$article = new Article;$article-&gt;title = $request-&gt;title;$article-&gt;content = $request-&gt;content;$article-&gt;verified = $request-&gt;verified;// Add category to article$article-&gt;category_id = $category-&gt;id;$article-&gt;save();Good:$category-&gt;article()-&gt;create($request-&gt;validated())Do not execute queries in Blade templates and use eager loading (N + 1 problem)Bad (for 100 users, 101 DB queries will be executed):@foreach (User::all() as $user)    @endforeachGood (for 100 users, 2 DB queries will be executed):$users = User::with('profile')-&gt;get();...@foreach ($users as $user)    @endforeachChunk data for data-heavy tasksBad:$users = $this-&gt;get();foreach ($users as $user) {    ...}Good:$this-&gt;chunk(500, function ($users) {    foreach ($users as $user) {        ...    }});Prefer descriptive method and variable names over commentsBad:// Determine if there are any joinsif (count((array) $builder-&gt;getQuery()-&gt;joins) &gt; 0)Good:if ($this-&gt;hasJoins())Do not put JS and CSS in Blade templates and do not put any HTML in PHP classesBad:let article = ``;Better:&lt;input id=\"article\" type=\"hidden\" value='@json($article)'&gt;Or&lt;button class=\"js-fav-article\" data-article='@json($article)'&gt;&lt;button&gt;In a Javascript file:let article = $('#article').val();The best way is to use specialized PHP to JS package to transfer the data.Use config and language files, constants instead of text in the codeBad:public function isNormal(): bool{    return $article-&gt;type === 'normal';}return back()-&gt;with('message', 'Your article has been added!');Good:public function isNormal(){    return $article-&gt;type === Article::TYPE_NORMAL;}return back()-&gt;with('message', __('app.article_added'));Use standard Laravel tools accepted by community  Prefer to use built-in Laravel functionality and community packages instead of using 3rd party packages and tools. Any developer who will work with your app in the future will need to learn new tools. Also, chances to get help from the Laravel community are significantly lower when you’re using a 3rd party package or tool. Do not make your client pay for that.            Task      Standard tools      3rd party tools                  Authorization      Policies      Entrust, Sentinel and other packages              Compiling assets      Laravel Mix      Grunt, Gulp, 3rd party packages              Development Environment      Laravel Sail, Homestead      Docker              Deployment      Laravel Forge      Deployer and other solutions              Unit testing      PHPUnit, Mockery      Phpspec              Browser testing      Laravel Dusk      Codeception              DB      Eloquent      SQL, Doctrine              Templates      Blade      Twig              Working with data      Laravel collections      Arrays              Form validation      Request classes      3rd party packages, validation in controller              Authentication      Built-in      3rd party packages, your own solution              API authentication      Laravel Passport, Laravel Sanctum      3rd party JWT and OAuth packages              Creating API      Built-in      Dingo API and similar packages              Working with DB structure      Migrations      Working with DB structure directly              Localization      Built-in      3rd party packages              Realtime user interfaces      Laravel Echo, Pusher      3rd party packages and working with WebSockets directly              Generating testing data      Seeder classes, Model Factories, Faker      Creating testing data manually              Task scheduling      Laravel Task Scheduler      Scripts and 3rd party packages              DB      MySQL, PostgreSQL, SQLite, SQL Server      MongoDB      Follow Laravel naming conventionsFollow PSR standards.Also, follow naming conventions accepted by Laravel community:            What      How      Good      Bad                  Controller      singular      ArticleController      ArticlesController              Route      plural      articles/1      article/1              Named route      snake_case with dot notation      users.show_active      users.show-active, show-active-users              Model      singular      User      Users              hasOne or belongsTo relationship      singular      articleComment      articleComments, article_comment              All other relationships      plural      articleComments      articleComment, article_comments              Table      plural      article_comments      article_comment, articleComments              Pivot table      singular model names in alphabetical order      article_user      user_article, articles_users              Table column      snake_case without model name      meta_title      MetaTitle; article_meta_title              Model property      snake_case      $model-&gt;created_at      $model-&gt;createdAt              Foreign key      singular model name with _id suffix      article_id      ArticleId, id_article, articles_id              Primary key      -      id      custom_id              Migration      -      2017_01_01_000000_create_articles_table      2017_01_01_000000_articles              Method      camelCase      getAll      get_all              Method in resource controller      table      store      saveArticle              Method in test class      camelCase      testGuestCannotSeeArticle      test_guest_cannot_see_article              Variable      camelCase      $articlesWithAuthor      $articles_with_author              Collection      descriptive, plural      $activeUsers = User::active()-&gt;get()      $active, $data              Object      descriptive, singular      $activeUser = User::active()-&gt;first()      $users, $obj              Config and language files index      snake_case      articles_enabled      ArticlesEnabled; articles-enabled              View      kebab-case      show-filtered.blade.php      showFiltered.blade.php, show_filtered.blade.php              Config      snake_case      google_calendar.php      googleCalendar.php, google-calendar.php              Contract (interface)      adjective or noun      AuthenticationInterface      Authenticatable, IAuthentication              Trait      adjective      Notifiable      NotificationTrait      Use shorter and more readable syntax where possibleBad:$request-&gt;session()-&gt;get('cart');$request-&gt;input('name');Good:session('cart');$request-&gt;name;More examples:            Common syntax      Shorter and more readable syntax                  Session::get('cart')      session('cart')              $request-&gt;session()-&gt;get('cart')      session('cart')              Session::put('cart', $data)      session(['cart' =&gt; $data])              $request-&gt;input('name'), Request::get('name')      $request-&gt;name, request('name')              return Redirect::back()      return back()              is_null($object-&gt;relation) ? null : $object-&gt;relation-&gt;id      optional($object-&gt;relation)-&gt;id (in PHP 8: $object-&gt;relation?-&gt;id)              return view('index')-&gt;with('title', $title)-&gt;with('client', $client)      return view('index', compact('title', 'client'))              $request-&gt;has('value') ? $request-&gt;value : 'default';      $request-&gt;get('value', 'default')              Carbon::now(), Carbon::today()      now(), today()              App::make('Class')      app('Class')              -&gt;where('column', '=', 1)      -&gt;where('column', 1)              -&gt;orderBy('created_at', 'desc')      -&gt;latest()              -&gt;orderBy('age', 'desc')      -&gt;latest('age')              -&gt;orderBy('created_at', 'asc')      -&gt;oldest()              -&gt;select('id', 'name')-&gt;get()      -&gt;get(['id', 'name'])              -&gt;first()-&gt;name      -&gt;value('name')      Use IoC container or facades instead of new Classnew Class syntax creates tight coupling between classes and complicates testing. Use IoC container or facades instead.Bad:$user = new User;$user-&gt;create($request-&gt;validated());Good:public function __construct(User $user){    $this-&gt;user = $user;}....$this-&gt;user-&gt;create($request-&gt;validated());Do not get data from the .env file directlyPass the data to config files instead and then use the config() helper function to use the data in an application.Bad:$apiKey = env('API_KEY');Good:// config/api.php'key' =&gt; env('API_KEY'),// Use the data$apiKey = config('api.key');Store dates in the standard format. Use accessors and mutators to modify date formatBad:Good:// Modelprotected $dates = ['ordered_at', 'created_at', 'updated_at'];public function getSomeDateAttribute($date){    return $date-&gt;format('m-d');}// ViewOther good practicesAvoid using patterns and tools that are alien to Laravel and similar frameworks (i.e. RoR, Django). If you like Symfony (or Spring) approach for building apps, it’s a good idea to use these frameworks instead.Never put any logic in routes files.Minimize usage of vanilla PHP in Blade templates.Use in-memory DB for testing.Do not override standard framework features to avoid problems related to updating the framework version and many other issues.Use modern PHP syntax where possible, but don’t forget about readability.Avoid using View Composers and similar tools unless you really know what you’re doing. In most cases, there is a better way to solve the problem."
  },
  
  {
    "title": "Check Required Node Version",
    "url": "/posts/nodeversion/",
    "categories": "Node Version, Node Sass",
    "tags": "nodeversion, vuejs, packagejson, nodesass",
    "date": "2023-01-21 03:00:00 +0300",
    





    
    "snippet": "Error/node_modules/node-sass: Command failedStep 1  Check your node version based on node-sass version in package.json            NodeJs      Supported node-sass version      Node Module           ...",
    "content": "Error/node_modules/node-sass: Command failedStep 1  Check your node version based on node-sass version in package.json            NodeJs      Supported node-sass version      Node Module                  Node 16      6.0+      93              Node 15      5.0+      88              Node 14      4.14+      83              Node 13      4.13+, &lt;5.0      79              Node 12      4.12+      72              Node 11      4.10+, &lt;5.0      67              Node 10      4.9+, &lt;6.0      64              Node 8      4.5.3+, &lt;5.0      57              Node &lt; 8      &lt;5.0      &lt;57      Step 2  check your Node version with:     node --version      Step 3  install the Nodejs version according with your node-sass, if your are using NVM, run:     nvm use DESIRED_VERSION      Step 4  clean old node_modules deleting the folder or type this on terminal:    rm -rf node_modules      Step 5  run:    npm install      "
  },
  
  {
    "title": "Coding Principles",
    "url": "/posts/codingprinciples/",
    "categories": "Software Development, Design Pattern",
    "tags": "solid, kiss, dry",
    "date": "2023-01-17 09:56:00 +0300",
    





    
    "snippet": "Software Design PrinciplesSoftware Design principles are a set of guidelines that helps developers to make a good system design.One of the most important principle is SOLID principle.The Key softwa...",
    "content": "Software Design PrinciplesSoftware Design principles are a set of guidelines that helps developers to make a good system design.One of the most important principle is SOLID principle.The Key software design principles are as:SOLIDIt is combination of five basic designing principles.Single Responsibility Principle (SRP)This principle states that there should never be more than one reason for aclass to change. This means that you should design your classes in such a way that each class should have a single purpose.Example - An Account class is responsible for managing  Current and Saving Account but a CurrentAccount and a SavingAccount classes would be responsible for managing current and saving accounts respectively. Hence both are responsible for single purpose only. Hence we are moving towards specialization.Open/Closed Principle (OCP)This principle states that software entities (classes, modules, functions, etc.)should be open for extension but closed for modification. The “closed” part ofthe rule states that once a module has been developed and tested, the codeshould only be changed to correct bugs. The “open” part says that you shouldbe able to extend existing code in order to introduce new functionality.Example – A PaymentGateway base class contains all basic payment related  properties and methods. This class can be extended by different PaymentGateway  classes for different payment gateway vendors to achieve theirs functionalities.  Hence it is open for extension but closed for modification.Liskov Substitution Principle (LSP)This principle states that functions that use pointers or references to baseclasses must be able to use objects of derived classes without knowing it.Example - Assume that you have an inheritance hierarchy with Person and Student. Wherever you can use Person, you should also be able to use a Student, because Student is a subclass of Person.Interface Segregation Principle (ISP)This principle states that Clients should not be forced to depend uponinterfaces that they don’t use. This means the number of members in theinterface that is visible to the dependent class should be minimized.Example - The service interface that is exposed to the client should contains  only client related methods not all.Dependency Inversion Principle (DIP)It states that  High level modules should not depend upon low level modules. Both should dependupon abstractions.  Abstractions should not depend upon details. Details should depend uponabstractions.It helps us to develop loosely couple code by ensuring that high-level modulesdepend on abstractions rather than concrete implementations of lower-level modules.The Dependency Injection pattern is an implementation of this principle.Example- The Dependency Injection pattern is an implementation of this principleDRY (Don’t Repeat Yourself)This principle states that each small pieces of knowledge (code) may onlyoccur exactly once in the entire system. This helps us to write scalable,maintainable and reusable code.If need for repition occurs, create a function and call it repeatedly.Example – Asp.Net MVC framework works on this principle.KISS (Keep it simple, Stupid!)This principle states that try to keep each small piece of software simple andunnecessary complexity should be avoided. This helps us to write easy,maintainable code.YAGNI (You aint gonna need it)This principle states that always implement things when you actually needthem. Never implements things before you need them.console.log('Thank you!');"
  }
  
]

