[
  
  {
    "title": "Switch between php version in mac",
    "url": "/posts/switchbetweenphpversion/",
    "categories": "PHP Version, Mac, Brew",
    "tags": "phpversion, mac, brew",
    "date": "2023-01-28 03:00:00 +0300",
    





    
    "snippet": "Switch between php versionsbrew unlink php@&lt;current-phpVersion&gt;brew link php@&lt;desired-phpVersion&gt;",
    "content": "Switch between php versionsbrew unlink php@&lt;current-phpVersion&gt;brew link php@&lt;desired-phpVersion&gt;"
  },
  
  {
    "title": "Best of Laravel Topics and Challenging tasks",
    "url": "/posts/laraveltopics/",
    "categories": "Filtering, scraping, Laravel",
    "tags": "laravel, filter, pagination, challenging",
    "date": "2023-01-27 03:00:00 +0300",
    





    
    "snippet": "Filter in Laravel",
    "content": "Filter in Laravel"
  },
  
  {
    "title": "What is Domain Name?",
    "url": "/posts/domainname/",
    "categories": "Web, Domain Name",
    "tags": "web, domainname",
    "date": "2023-01-26 03:00:00 +0300",
    





    
    "snippet": "SummaryDomain names are a key part of the Internet infrastructure. They provide a human-readable address for any web server available on the Internet.Any Internet-connected computer can be reached ...",
    "content": "SummaryDomain names are a key part of the Internet infrastructure. They provide a human-readable address for any web server available on the Internet.Any Internet-connected computer can be reached through a public IP address, either an IPv4 address (e.g. 173.194.121.32) or an IPv6 address (e.g., 2027:0da8:8b73:0000:0000:8a2e:0370:1337).Computers can handle such addresses easily, but people have a hard time finding out who is running the server or what service the website offers. IP addresses are hard to remember and might change over time.To solve all those problems we use human-readable addresses called domain names.Structure of domain namesA domain name has a simple structure made of several parts (it might be one part only, two, three…), separated by dots and read from right to left:Each of those parts provides specific information about the whole domain name.TLD (Top-Level Domain).TLDs tell users the general purpose of the service behind the domain name. The most generic TLDs (.com, .org, .net) don’t require web services to meet any particular criteria, but some TLDs enforce stricter policies so it is clearer what their purpose is. For example:  Local TLDs such as .us, .fr, or .se can require the service to be provided in a given language or hosted in a certain country — they are supposed to indicate a resource in a particular language or country.  TLDs containing .gov are only allowed to be used by government departments.  The .edu TLD is only for use by educational and academic institutions.TLDs can contain special as well as latin characters. A TLD’s maximum length is 63 characters, although most are around 2–3.The full list of TLDs is maintained by ICANN.Label (or component)The labels are what follow the TLD. A label is a case-insensitive character sequence anywhere from one to sixty-three characters in length, containing only the letters A through Z, digits 0 through 9, and the - character (which may not be the first or last character in the label). a, 97, and hello-strange-person-16-how-are-you are all examples of valid labels.The label located right before the TLD is also called a Secondary Level Domain (SLD).A domain name can have many labels (or components). It is not mandatory nor necessary to have 3 labels to form a domain name. For instance, www.inf.ed.ac.uk is a valid domain name. For any domain you control (e.g. mozilla.org), you can create “subdomains” with different content located at each, like developer.mozilla.org, iot.mozilla.org, or bugzilla.mozilla.org.Buying a domain nameWho owns a domain name?You cannot “buy a domain name”. This is so that unused domain names eventually become available to be used again by someone else. If every domain name was bought, the web would quickly fill up with unused domain names that were locked and couldn’t be used by anyone.Instead, you pay for the right to use a domain name for one or more years. You can renew your right, and your renewal has priority over other people’s applications. But you never own the domain name.Companies called registrars use domain name registries to keep track of technical and administrative information connecting you to your domain name.  Note: For some domain name, it might not be a registrar which is in charge of keeping track. For instance, every domain name under .fire is managed by Amazon.Finding an available domain nameTo find out whether a given domain name is available,  Go to a domain name registrar’s website. Most of them provide a “whois” service that tells you whether a domain name is available.  Alternatively, if you use a system with a built-in shell, type a whois command into it, as shown here for mozilla.org:$ whois mozilla.orgDomain Name:MOZILLA.ORGDomain ID: D1409563-LRORCreation Date: 1998-01-24T05:00:00ZUpdated Date: 2013-12-08T01:16:57ZRegistry Expiry Date: 2015-01-23T05:00:00ZSponsoring Registrar:MarkMonitor Inc. (R37-LROR)Sponsoring Registrar IANA ID: 292WHOIS Server:Referral URL:Domain Status: clientDeleteProhibitedDomain Status: clientTransferProhibitedDomain Status: clientUpdateProhibitedRegistrant ID:mmr-33684Registrant Name:DNS AdminRegistrant Organization:Mozilla FoundationRegistrant Street: 650 Castro St Ste 300Registrant City:Mountain ViewRegistrant State/Province:CARegistrant Postal Code:94041Registrant Country:USRegistrant Phone:+1.6509030800As you can see, I can’t register mozilla.org because the Mozilla Foundation has already registered it.On the other hand, let’s see if I could register afunkydomainname.org:$ whois afunkydomainname.orgNOT FOUNDAs you can see, the domain does not exist in the whois database (at the time of writing), so we could ask to register it. Good to know!Getting a domain nameThe process is quite straightforward:  Go to a registrar’s website.  Usually there is a prominent “Get a domain name” call to action. Click on it.  Fill out the form with all required details. Make sure, especially, that you have not misspelled your desired domain name. Once it’s paid for, it’s too late!      The registrar will let you know when the domain name is properly registered. Within a few hours, all DNS servers will have received your DNS information.     Note: In this process the registrar asks you for your real-world address. Make sure you fill it properly, since in some countries registrars may be forced to close the domain if they cannot provide a valid address.      DNS refreshingDNS databases are stored on every DNS server worldwide, and all these servers refer to a few special servers called “authoritative name servers” or “top-level DNS servers” — these are like the boss servers that manage the system.Whenever your registrar creates or updates any information for a given domain, the information must be refreshed in every DNS database. Each DNS server that knows about a given domain stores the information for some time before it is automatically invalidated and then refreshed (the DNS server queries an authoritative server and fetches the updated information from it). Thus, it takes some time for DNS servers that know about this domain name to get the up-to-date information.How does a DNS request work?As we already saw, when you want to display a webpage in your browser it’s easier to type a domain name than an IP address. Let’s take a look at the process:  Type mozilla.org in your browser’s location bar.  Your browser asks your computer if it already recognizes the IP address identified by this domain name (using a local DNS cache). If it does, the name is translated to the IP address and the browser negotiates contents with the web server. End of story.  If your computer does not know which IP is behind the mozilla.org name, it goes on to ask a DNS server, whose job is precisely to tell your computer which IP address matches each registered domain name.  Now that the computer knows the requested IP address, your browser can negotiate contents with the web server.Reference"
  },
  
  {
    "title": "How The Web Works?",
    "url": "/posts/web/",
    "categories": "Web, Web Page, Website, Web Server, Search Engine",
    "tags": "web, webpage, webserver",
    "date": "2023-01-25 03:00:00 +0300",
    





    
    "snippet": "How The Web Works?How the web works provides a simplified view of what happens when you view a webpage in a web browser on your computer or phone.This theory is not essential to writing web code in...",
    "content": "How The Web Works?How the web works provides a simplified view of what happens when you view a webpage in a web browser on your computer or phone.This theory is not essential to writing web code in the short term, but before long you’ll really start to benefit from understanding what’s happening in the background.Clients and serversComputers connected to the internet are called clients and servers. A simplified diagram of how they interact might look like this:      Clients are the typical web user’s internet-connected devices (for example, your computer connected to your Wi-Fi, or your phone connected to your mobile network) and web-accessing software available on those devices (usually a web browser like Firefox or Chrome).        Servers are computers that store webpages, sites, or apps. When a client device wants to access a webpage, a copy of the webpage is downloaded from the server onto the client machine to be displayed in the user’s web browser.    The other parts of the toolbox    The client and server we’ve described above don’t tell the whole story. There are many other parts involved, and we’ll describe them below.  For now, let’s imagine that the web is a road. On one end of the road is the client, which is like your house. On the other end of the road is the server, which is a shop you want to buy something from.In addition to the client and the server, we also need to say hello to:  Your internet connection: Allows you to send and receive data on the web. It’s basically like the street between your house and the shop.  TCP/IP: Transmission Control Protocol and Internet Protocol are communication protocols that define how data should travel across the internet. This is like the transport mechanisms that let you place an order, go to the shop, and buy your goods. In our example, this is like a car or a bike (or however else you might get around).  DNS: Domain Name System is like an address book for websites. When you type a web address in your browser, the browser looks at the DNS to find the website’s IP address before it can retrieve the website. The browser needs to find out which server the website lives on, so it can send HTTP messages to the right place (see below). This is like looking up the address of the shop so you can access it.  HTTP: Hypertext Transfer Protocol is an application protocol that defines a language for clients and servers to speak to each other. This is like the language you use to order your goods.      Component files: A website is made up of many different files, which are like the different parts of the goods you buy from the shop. These files come in two main types          Code files: Websites are built primarily from HTML, CSS, and JavaScript, though you’ll meet other technologies a bit later.      Assets: This is a collective name for all the other stuff that makes up a website, such as images, music, video, Word documents, and PDFs.        So what happens, exactly?        When you type a web address into your browser (for our analogy that’s like walking to the shop):              The browser goes to the DNS server, and finds the real address of the server that the website lives on (you find the address of the shop).  The browser sends an HTTP request message to the server, asking it to send a copy of the website to the client (you go to the shop and order your goods). This message, and all other data sent between the client and the server, is sent across your internet connection using TCP/IP.  If the server approves the client’s request, the server sends the client a “200 OK” message, which means “Of course you can look at that website! Here it is”, and then starts sending the website’s files to the browser as a series of small chunks called data packets (the shop gives you your goods, and you bring them back to your house).  The browser assembles the small chunks into a complete web page and displays it to you (the goods arrive at your door — new shiny stuff, awesome!).    Order in which component files are parsed    When browsers send requests to servers for HTML files, those HTML files often contain link elements referencing external CSS stylesheets and script elements referencing external JavaScript scripts. It’s important to know the order in which those files are parsed by the browser as the browser loads the page:    The browser parses the HTML file first, and that leads to the browser recognizing any link-element references to external CSS stylesheets and any script-element references to scripts.  As the browser parses the HTML, it sends requests back to the server for any CSS files it has found from link elements, and any JavaScript files it has found from script elements, and from those, then parses the CSS and JavaScript.      The browser generates an in-memory DOM tree from the parsed HTML, generates an in-memory CSSOM structure from the parsed CSS, and compiles and executes the parsed JavaScript.    As the browser builds the DOM tree and applies the styles from the CSSOM tree and executes the JavaScript, a visual representation of the page is painted to the screen, and the user sees the page content and can begin to interact with it.DNS explainedReal web addresses aren’t the nice, memorable strings you type into your address bar to find your favorite websites. They are special numbers that look like this: 63.245.215.20.This is called an IP address, and it represents a unique location on the web. However, it’s not very easy to remember, is it? That’s why Domain Name Servers were invented. These are special servers that match up a web address you type into your browser (like “mozilla.org”) to the website’s real (IP) address.Websites can be reached directly via their IP addresses. You can use a DNS lookup tool to find the IP address of a website.Packets explainedEarlier we used the term “packets” to describe the format in which the data is sent from server to client. What do we mean here? Basically, when data is sent across the web, it is sent in thousands of small chunks. There are multiple reasons why data is sent in small packets. They are sometimes dropped or corrupted, and it’s easier to replace small chunks when this happens. Additionally, the packets can be routed along different paths, making the exchange faster and allowing many different users to download the same website at the same time. If each website was sent as a single big chunk, only one user could download it at a time, which obviously would make the web very inefficient and not much fun to use.What is the difference between webpage, website, web server, and search engine?In this article, we describe various web-related concepts: web pages, websites, web servers, and search engines. These terms are often confused by newcomers to the web or are incorrectly used. Let’s learn what they each mean!SummaryAs with any area of knowledge, the web comes with a lot of jargon. Don’t worry. We won’t overwhelm you with all of it (we have a glossary if you’re curious). However, there are a few basic terms you need to understand at the outset since you’ll hear these expressions all the time as you read on. It’s easy to mix these terms since they refer to related but different functionalities. You’ll sometimes see these terms misused in news reports and elsewhere, so getting them mixed up is understandable.We’ll cover these terms and technologies in more detail as we explore further, but these quick definitions will be a great start for you:web page  A document which can be displayed in a web browser such as Firefox, Google Chrome, Opera, Microsoft Internet Explorer or Edge, or Apple’s Safari. These are also often called just “pages.”website  A collection of web pages which are grouped together and usually connected together in various ways. Often called a “web site” or a “site.”web server  A computer that hosts a website on the Internet.search engine  A web service that helps you find other web pages, such as Google, Bing, Yahoo, or DuckDuckGo. Search engines are normally accessed through a web browser (e.g. you can perform search engine searches directly in the address bar of Firefox, Chrome, etc.) or through a web page (e.g. bing.com or duckduckgo.com).Let’s look at a simple analogy — a public library. This is what you would generally do when visiting a library:  Find a search index and look for the title of the book you want.  Make a note of the catalog number of the book.  Go to the particular section containing the book, find the right catalog number, and get the book.Let’s compare the library with a web server:  The library is like a web server. It has several sections, which is similar to a web server hosting multiple websites.  The different sections (science, math, history, etc.) in the library are like websites. Each section is like a unique website (two sections do not contain the same books).  The books in each section are like webpages. One website may have several webpages, e.g., the Science section (the website) will have books on heat, sound, thermodynamics, statics, etc. (the webpages). Webpages can each be found at a unique location (URL).  The search index is like the search engine. Each book has its own unique location in the library (two books cannot be kept at the same place) which is specified by the catalog number.Web pageA web page is a simple document displayable by a browser. Such documents are written in the HTML language (which we look into in more detail in other articles). A web page can embed a variety of different types of resources such as:  style information — controlling a page’s look-and-feel  scripts — which add interactivity to the page      media — images, sounds, and videos.    Note: Browsers can also display other documents such as PDF files or images, but the term web page specifically refers to HTML documents. Otherwise, we only use the term document.      All web pages available on the web are reachable through a unique address. To access a page, just type its address in your browser address bar:Web siteA website is a collection of linked web pages (plus their associated resources) that share a unique domain name. Each web page of a given website provides explicit links—most of the time in the form of clickable portions of text—that allow the user to move from one page of the website to another.To access a website, type its domain name in your browser address bar, and the browser will display the website’s main web page, or homepage (casually referred as “the home”):The ideas of a web page and a website are especially easy to confuse for a website that contains only one web page. Such a website is sometimes called a single-page website.Web serverA web server is a computer hosting one or more websites. “Hosting” means that all the web pages and their supporting files are available on that computer. The web server will send any web page from the website it is hosting to any user’s browser, per user request.Don’t confuse websites and web servers. For example, if you hear someone say, “My website is not responding”, it actually means that the web server is not responding and therefore the website is not available. More importantly, since a web server can host multiple websites, the term web server is never used to designate a website, as it could cause great confusion. In our previous example, if we said, “My web server is not responding”, it means that multiple websites on that web server are not available.Search engineSearch engines are a common source of confusion on the web. A search engine is a special kind of website that helps users find web pages from other websites.There are plenty out there: Google, Bing, Yandex, DuckDuckGo, and many more. Some are generic, some are specialized about certain topics. Use whichever you prefer.Many beginners on the web confuse search engines and browsers. Let’s make it clear: A browser is a piece of software that retrieves and displays web pages; a search engine is a website that helps people find web pages from other websites. The confusion arises because, the first time someone launches a browser, the browser displays a search engine’s homepage. This makes sense, because, obviously, the first thing you want to do with a browser is to find a web page to display. Don’t confuse the infrastructure (e.g., the browser) with the service (e.g., the search engine). The distinction will help you quite a bit, but even some professionals speak loosely, so don’t feel anxious about it."
  },
  
  {
    "title": "How Does the Internet Work?",
    "url": "/posts/internet/",
    "categories": "Internet",
    "tags": "internet",
    "date": "2023-01-24 03:00:00 +0300",
    





    
    "snippet": "SummaryThe Internet is the backbone of the Web, the technical infrastructure that makes the Web possible. At its most basic, the Internet is a large network of computers which communicate all toget...",
    "content": "SummaryThe Internet is the backbone of the Web, the technical infrastructure that makes the Web possible. At its most basic, the Internet is a large network of computers which communicate all together.History of Internet in ShortIt began in the 1960s as a US-army-funded research project, then evolved into a public infrastructure in the 1980s with the support of many public universities and private companies. The various technologies that support the Internet have evolved over time, but the way it works hasn’t changed that much: Internet is a way to connect computers all together and ensure that, whatever happens, they find a way to stay connected.Deeper diveA simple networkWhen two computers need to communicate, you have to link them, either physically (usually with an Ethernet cable) or wireless (for example with  Wi-Fi or Bluetooth systems). All modern computers can sustain any of those connections.Such a network is not limited to two computers. You can connect as many computers as you wish. But it gets complicated quickly. If you’re trying to connect, say, ten computers, you need 45 cables, with nine plugs per computer!To solve this problem, each computer on a network is connected to a special tiny computer called a router. This router has only one job: like a signaler at a railway station, it makes sure that a message sent from a given computer arrives at the right destination computer. To send a message to computer B, computer A must send the message to the router, which in turn forwards the message to computer B and makes sure the message is not delivered to computer C.Once we add a router to the system, our network of 10 computers only requires 10 cables: a single plug for each computer and a router with 10 plugs.A network of networksSo far so good. But what about connecting hundreds, thousands, billions of computers? Of course a single router can’t scale that far, but, if you read carefully, we said that a router is a computer like any other, so what keeps us from connecting two routers together? Nothing, so let’s do that.By connecting computers to routers, then routers to routers, we are able to scale infinitely.Such a network comes very close to what we call the Internet, but we’re missing something. We built that network for our own purposes. There are other networks out there: your friends, your neighbors, anyone can have their own network of computers. But it’s not really possible to set cables up between your house and the rest of the world, so how can you handle this? Well, there are already cables linked to your house, for example, electric power and telephone. The telephone infrastructure already connects your house with anyone in the world so it is the perfect wire we need. To connect our network to the telephone infrastructure, we need a special piece of equipment called a modem. This modem turns the information from our network into information manageable by the telephone infrastructure and vice versa.So we are connected to the telephone infrastructure. The next step is to send the messages from our network to the network we want to reach. To do that, we will connect our network to an Internet Service Provider (ISP). An ISP is a company that manages some special routers that are all linked together and can also access other ISPs’ routers. So the message from our network is carried through the network of ISP networks to the destination network. The Internet consists of this whole infrastructure of networks.Finding computersIf you want to send a message to a computer, you have to specify which one. Thus any computer linked to a network has a unique address that identifies it, called an “IP address” (where IP stands for Internet Protocol). It’s an address made of a series of four numbers separated by dots, for example: 192.168.2.10.That’s perfectly fine for computers, but we human beings have a hard time remembering that sort of address. To make things easier, we can alias an IP address with a human-readable name called a domain name. For example (at the time of writing; IP addresses can change) google.com is the domain name used on top of the IP address 142.250.190.78. So using the domain name is the easiest way for us to reach a computer over the Internet.Internet and the webAs you might notice, when we browse the Web with a Web browser, we usually use the domain name to reach a website. Does that mean the Internet and the Web are the same thing? It’s not that simple. As we saw, the Internet is a technical infrastructure which allows billions of computers to be connected all together. Among those computers, some computers (called Web servers) can send messages intelligible to web browsers. The Internet is an infrastructure, whereas the Web is a service built on top of the infrastructure. It is worth noting there are several other services built on top of the Internet, such as email and IRC.Intranets and ExtranetsIntranets are private networks that are restricted to members of a particular organization. They are commonly used to provide a portal for members to securely access shared resources, collaborate and communicate. For example, an organization’s intranet might host web pages for sharing department or team information, shared drives for managing key documents and files, portals for performing business administration tasks, and collaboration tools like wikis, discussion boards, and messaging systems.Extranets are very similar to Intranets, except they open all or part of a private network to allow sharing and collaboration with other organizations. They are typically used to safely and securely share information with clients and stakeholders who work closely with a business. Often their functions are similar to those provided by an intranet: information and file sharing, collaboration tools, discussion boards, etc.Both intranets and extranets run on the same kind of infrastructure as the Internet, and use the same protocols. They can therefore be accessed by authorized members from different physical locations.Reference"
  },
  
  {
    "title": "How to set project goals ?",
    "url": "/posts/basicstodesignwebsite/",
    "categories": "Design, Website",
    "tags": "design, website",
    "date": "2023-01-23 03:00:00 +0300",
    





    
    "snippet": "SummaryWhen starting with a web project, many people focus on the technical side. Of course you must be familiar with the technique of your craft, but what really matters is what you want to accomp...",
    "content": "SummaryWhen starting with a web project, many people focus on the technical side. Of course you must be familiar with the technique of your craft, but what really matters is what you want to accomplish. Yes, it seems obvious, but too many projects fail not from a lack of technical know-how, but from lack of goals and vision.So when you get an idea and want to turn it into a website, there are a few questions you should answer before anything else:  What exactly do I want to accomplish?  How will a website help me reach my goals?  What needs to be done, and in what order, to reach my goals?All of this is called project ideation and is a necessary first step to reach your goal, whether you are a beginner or an experienced developer.Deeper diveA project never starts with the technical side. Musicians will never make any music unless they first have an idea of what they want to play and the same is true for web developers. Technique comes second.Technique is obviously critical. Musicians must master their instrument. But good musicians can never produce good music without an idea. Therefore, before jumping into the technical side — for example, code and tools you must first step back and decide in detail what you want to do.An hour’s discussion with friends is a good start, but inadequate. You must sit down and structure your ideas to get a clear view of what path you must take to make your ideas a reality. To do this, you need only pen and paper and some time to answer at least the following questions.What exactly do I want to accomplish?This is the most important question to answer, since it drives everything else. List all the goals you want to reach. It can be anything: selling goods to make money, expressing political opinions, meeting new friends, gigging with musicians, collecting cat pictures, or whatever you want.Doing this simple exercise—writing goals and sorting them—will help you out when you have decisions to make. (Should I implement these features, use these services, create these designs?)So now that you have a prioritized list of goals, let’s move on to the next question.What needs to be done, and in what order, to reach my goals?Now that you know what you want to accomplish, it’s time to turn those goals into actionable steps. As a side note, your goals are not necessarily set in stone. They evolve over time even in the course of the project, especially if you run across unexpected obstacles or just change your mind.Two things to notice.      First, some of these items are not web-related (e.g., record music, write articles). Often those offline activities matter even more than the web side of the project. In sales, for instance, it’s far more important and time-consuming to handle supply, payment, and shipment than to build a website where people can place orders.        Second, setting out actionable steps leads to new questions you’ll need to answer. Usually there turn out to be more questions than we originally thought. (For example, should I learn how to do all this myself, ask someone to do it for me, or use third-party services?)  ConclusionAs you can see, the simple idea “I want to make a website” generates a long to-do list, which only grows longer as you think about it. Soon it may look overwhelming, but don’t panic. You don’t need to answer all the questions and you don’t need to do everything on your list. What matters is to have a vision of what you want and how to get there. Once you have that clear vision, you need to decide how and when to do it. Break down big tasks into small, actionable steps. And those small steps will add up to great achievements.Reference"
  },
  
  {
    "title": "Laravel Best Practices",
    "url": "/posts/bestpractices/",
    "categories": "Laravel Developer, Web Development",
    "tags": "laravel, bestpractice, mvc",
    "date": "2023-01-21 10:42:00 +0300",
    





    
    "snippet": "Single responsibility principle  A class and a method should have only one responsibility.Bad:public function getFullNameAttribute(){    if (auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRo...",
    "content": "Single responsibility principle  A class and a method should have only one responsibility.Bad:public function getFullNameAttribute(){    if (auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRole('client') &amp;&amp; auth()-&gt;user()-&gt;isVerified()) {        return 'Mr. ' . $this-&gt;first_name . ' ' . $this-&gt;middle_name . ' ' . $this-&gt;last_name;    } else {        return $this-&gt;first_name[0] . '. ' . $this-&gt;last_name;    }}Good:public function getFullNameAttribute(): bool{    return $this-&gt;isVerifiedClient() ? $this-&gt;getFullNameLong() : $this-&gt;getFullNameShort();}public function isVerifiedClient(): bool{    return auth()-&gt;user() &amp;&amp; auth()-&gt;user()-&gt;hasRole('client') &amp;&amp; auth()-&gt;user()-&gt;isVerified();}public function getFullNameLong(): string{    return 'Mr. ' . $this-&gt;first_name . ' ' . $this-&gt;middle_name . ' ' . $this-&gt;last_name;}public function getFullNameShort(): string{    return $this-&gt;first_name[0] . '. ' . $this-&gt;last_name;}Fat models, skinny controllers  Put all DB related logic into Eloquent models.Bad:public function index(){    $clients = Client::verified()        -&gt;with(['orders' =&gt; function ($q) {            $q-&gt;where('created_at', '&gt;', Carbon::today()-&gt;subWeek());        }])        -&gt;get();    return view('index', ['clients' =&gt; $clients]);}Good:public function index(){    return view('index', ['clients' =&gt; $this-&gt;client-&gt;getWithNewOrders()]);}class Client extends Model{    public function getWithNewOrders(): Collection    {        return $this-&gt;verified()            -&gt;with(['orders' =&gt; function ($q) {                $q-&gt;where('created_at', '&gt;', Carbon::today()-&gt;subWeek());            }])            -&gt;get();    }}Validation  Move validation from controllers to Request classes.Bad:public function store(Request $request){    $request-&gt;validate([        'title' =&gt; 'required|unique:posts|max:255',        'body' =&gt; 'required',        'publish_at' =&gt; 'nullable|date',    ]);    ....}Good:public function store(PostRequest $request){    ....}class PostRequest extends Request{    public function rules(): array    {        return [            'title' =&gt; 'required|unique:posts|max:255',            'body' =&gt; 'required',            'publish_at' =&gt; 'nullable|date',        ];    }}Business logic should be in service class  A controller must have only one responsibility, so move business logic from controllers to service classes.Bad:public function store(Request $request){    if ($request-&gt;hasFile('image')) {        $request-&gt;file('image')-&gt;move(public_path('images') . 'temp');    }    ....}Good:public function store(Request $request){    $this-&gt;articleService-&gt;handleUploadedImage($request-&gt;file('image'));    ....}class ArticleService{    public function handleUploadedImage($image): void    {        if (!is_null($image)) {            $image-&gt;move(public_path('images') . 'temp');        }    }}Don’t repeat yourself (DRY)  Reuse code when you can. SRP is helping you to avoid duplication. Also, reuse Blade templates, use Eloquent scopes etc.Bad:public function getActive(){    return $this-&gt;where('verified', 1)-&gt;whereNotNull('deleted_at')-&gt;get();}public function getArticles(){    return $this-&gt;whereHas('user', function ($q) {            $q-&gt;where('verified', 1)-&gt;whereNotNull('deleted_at');        })-&gt;get();}Good:public function scopeActive($q){    return $q-&gt;where('verified', true)-&gt;whereNotNull('deleted_at');}public function getActive(): Collection{    return $this-&gt;active()-&gt;get();}public function getArticles(): Collection{    return $this-&gt;whereHas('user', function ($q) {            $q-&gt;active();        })-&gt;get();}Prefer to use Eloquent over using Query Builder and raw SQL queries. Prefer collections over arrays  Eloquent allows you to write readable and maintainable code. Also, Eloquent has great built-in tools like soft deletes, events, scopes etc.Bad:SELECT *FROM `articles`WHERE EXISTS (SELECT *              FROM `users`              WHERE `articles`.`user_id` = `users`.`id`              AND EXISTS (SELECT *                          FROM `profiles`                          WHERE `profiles`.`user_id` = `users`.`id`)              AND `users`.`deleted_at` IS NULL)AND `verified` = '1'AND `active` = '1'ORDER BY `created_at` DESCGood:Article::has('user.profile')-&gt;verified()-&gt;latest()-&gt;get();Mass assignmentBad:$article = new Article;$article-&gt;title = $request-&gt;title;$article-&gt;content = $request-&gt;content;$article-&gt;verified = $request-&gt;verified;// Add category to article$article-&gt;category_id = $category-&gt;id;$article-&gt;save();Good:$category-&gt;article()-&gt;create($request-&gt;validated())Do not execute queries in Blade templates and use eager loading (N + 1 problem)Bad (for 100 users, 101 DB queries will be executed):@foreach (User::all() as $user)    @endforeachGood (for 100 users, 2 DB queries will be executed):$users = User::with('profile')-&gt;get();...@foreach ($users as $user)    @endforeachChunk data for data-heavy tasksBad:$users = $this-&gt;get();foreach ($users as $user) {    ...}Good:$this-&gt;chunk(500, function ($users) {    foreach ($users as $user) {        ...    }});Prefer descriptive method and variable names over commentsBad:// Determine if there are any joinsif (count((array) $builder-&gt;getQuery()-&gt;joins) &gt; 0)Good:if ($this-&gt;hasJoins())Do not put JS and CSS in Blade templates and do not put any HTML in PHP classesBad:let article = ``;Better:&lt;input id=\"article\" type=\"hidden\" value='@json($article)'&gt;Or&lt;button class=\"js-fav-article\" data-article='@json($article)'&gt;&lt;button&gt;In a Javascript file:let article = $('#article').val();The best way is to use specialized PHP to JS package to transfer the data.Use config and language files, constants instead of text in the codeBad:public function isNormal(): bool{    return $article-&gt;type === 'normal';}return back()-&gt;with('message', 'Your article has been added!');Good:public function isNormal(){    return $article-&gt;type === Article::TYPE_NORMAL;}return back()-&gt;with('message', __('app.article_added'));Use standard Laravel tools accepted by community  Prefer to use built-in Laravel functionality and community packages instead of using 3rd party packages and tools. Any developer who will work with your app in the future will need to learn new tools. Also, chances to get help from the Laravel community are significantly lower when you’re using a 3rd party package or tool. Do not make your client pay for that.            Task      Standard tools      3rd party tools                  Authorization      Policies      Entrust, Sentinel and other packages              Compiling assets      Laravel Mix      Grunt, Gulp, 3rd party packages              Development Environment      Laravel Sail, Homestead      Docker              Deployment      Laravel Forge      Deployer and other solutions              Unit testing      PHPUnit, Mockery      Phpspec              Browser testing      Laravel Dusk      Codeception              DB      Eloquent      SQL, Doctrine              Templates      Blade      Twig              Working with data      Laravel collections      Arrays              Form validation      Request classes      3rd party packages, validation in controller              Authentication      Built-in      3rd party packages, your own solution              API authentication      Laravel Passport, Laravel Sanctum      3rd party JWT and OAuth packages              Creating API      Built-in      Dingo API and similar packages              Working with DB structure      Migrations      Working with DB structure directly              Localization      Built-in      3rd party packages              Realtime user interfaces      Laravel Echo, Pusher      3rd party packages and working with WebSockets directly              Generating testing data      Seeder classes, Model Factories, Faker      Creating testing data manually              Task scheduling      Laravel Task Scheduler      Scripts and 3rd party packages              DB      MySQL, PostgreSQL, SQLite, SQL Server      MongoDB      Follow Laravel naming conventionsFollow PSR standards.Also, follow naming conventions accepted by Laravel community:            What      How      Good      Bad                  Controller      singular      ArticleController      ArticlesController              Route      plural      articles/1      article/1              Named route      snake_case with dot notation      users.show_active      users.show-active, show-active-users              Model      singular      User      Users              hasOne or belongsTo relationship      singular      articleComment      articleComments, article_comment              All other relationships      plural      articleComments      articleComment, article_comments              Table      plural      article_comments      article_comment, articleComments              Pivot table      singular model names in alphabetical order      article_user      user_article, articles_users              Table column      snake_case without model name      meta_title      MetaTitle; article_meta_title              Model property      snake_case      $model-&gt;created_at      $model-&gt;createdAt              Foreign key      singular model name with _id suffix      article_id      ArticleId, id_article, articles_id              Primary key      -      id      custom_id              Migration      -      2017_01_01_000000_create_articles_table      2017_01_01_000000_articles              Method      camelCase      getAll      get_all              Method in resource controller      table      store      saveArticle              Method in test class      camelCase      testGuestCannotSeeArticle      test_guest_cannot_see_article              Variable      camelCase      $articlesWithAuthor      $articles_with_author              Collection      descriptive, plural      $activeUsers = User::active()-&gt;get()      $active, $data              Object      descriptive, singular      $activeUser = User::active()-&gt;first()      $users, $obj              Config and language files index      snake_case      articles_enabled      ArticlesEnabled; articles-enabled              View      kebab-case      show-filtered.blade.php      showFiltered.blade.php, show_filtered.blade.php              Config      snake_case      google_calendar.php      googleCalendar.php, google-calendar.php              Contract (interface)      adjective or noun      AuthenticationInterface      Authenticatable, IAuthentication              Trait      adjective      Notifiable      NotificationTrait      Use shorter and more readable syntax where possibleBad:$request-&gt;session()-&gt;get('cart');$request-&gt;input('name');Good:session('cart');$request-&gt;name;More examples:            Common syntax      Shorter and more readable syntax                  Session::get('cart')      session('cart')              $request-&gt;session()-&gt;get('cart')      session('cart')              Session::put('cart', $data)      session(['cart' =&gt; $data])              $request-&gt;input('name'), Request::get('name')      $request-&gt;name, request('name')              return Redirect::back()      return back()              is_null($object-&gt;relation) ? null : $object-&gt;relation-&gt;id      optional($object-&gt;relation)-&gt;id (in PHP 8: $object-&gt;relation?-&gt;id)              return view('index')-&gt;with('title', $title)-&gt;with('client', $client)      return view('index', compact('title', 'client'))              $request-&gt;has('value') ? $request-&gt;value : 'default';      $request-&gt;get('value', 'default')              Carbon::now(), Carbon::today()      now(), today()              App::make('Class')      app('Class')              -&gt;where('column', '=', 1)      -&gt;where('column', 1)              -&gt;orderBy('created_at', 'desc')      -&gt;latest()              -&gt;orderBy('age', 'desc')      -&gt;latest('age')              -&gt;orderBy('created_at', 'asc')      -&gt;oldest()              -&gt;select('id', 'name')-&gt;get()      -&gt;get(['id', 'name'])              -&gt;first()-&gt;name      -&gt;value('name')      Use IoC container or facades instead of new Classnew Class syntax creates tight coupling between classes and complicates testing. Use IoC container or facades instead.Bad:$user = new User;$user-&gt;create($request-&gt;validated());Good:public function __construct(User $user){    $this-&gt;user = $user;}....$this-&gt;user-&gt;create($request-&gt;validated());Do not get data from the .env file directlyPass the data to config files instead and then use the config() helper function to use the data in an application.Bad:$apiKey = env('API_KEY');Good:// config/api.php'key' =&gt; env('API_KEY'),// Use the data$apiKey = config('api.key');Store dates in the standard format. Use accessors and mutators to modify date formatBad:Good:// Modelprotected $dates = ['ordered_at', 'created_at', 'updated_at'];public function getSomeDateAttribute($date){    return $date-&gt;format('m-d');}// ViewOther good practicesAvoid using patterns and tools that are alien to Laravel and similar frameworks (i.e. RoR, Django). If you like Symfony (or Spring) approach for building apps, it’s a good idea to use these frameworks instead.Never put any logic in routes files.Minimize usage of vanilla PHP in Blade templates.Use in-memory DB for testing.Do not override standard framework features to avoid problems related to updating the framework version and many other issues.Use modern PHP syntax where possible, but don’t forget about readability.Avoid using View Composers and similar tools unless you really know what you’re doing. In most cases, there is a better way to solve the problem."
  },
  
  {
    "title": "Check Required Node Version",
    "url": "/posts/nodeversion/",
    "categories": "Node Version, Node Sass",
    "tags": "nodeversion, vuejs, packagejson, nodesass",
    "date": "2023-01-21 03:00:00 +0300",
    





    
    "snippet": "Error/node_modules/node-sass: Command failedStep 1  Check your node version based on node-sass version in package.json            NodeJs      Supported node-sass version      Node Module           ...",
    "content": "Error/node_modules/node-sass: Command failedStep 1  Check your node version based on node-sass version in package.json            NodeJs      Supported node-sass version      Node Module                  Node 16      6.0+      93              Node 15      5.0+      88              Node 14      4.14+      83              Node 13      4.13+, &lt;5.0      79              Node 12      4.12+      72              Node 11      4.10+, &lt;5.0      67              Node 10      4.9+, &lt;6.0      64              Node 8      4.5.3+, &lt;5.0      57              Node &lt; 8      &lt;5.0      &lt;57      Step 2  check your Node version with:     node --version      Step 3  install the Nodejs version according with your node-sass, if your are using NVM, run:     nvm use DESIRED_VERSION      Step 4  clean old node_modules deleting the folder or type this on terminal:    rm -rf node_modules      Step 5  run:    npm install      "
  },
  
  {
    "title": "Coding Principles",
    "url": "/posts/codingprinciples/",
    "categories": "Software Development, Design Pattern",
    "tags": "solid, kiss, dry",
    "date": "2023-01-17 09:56:00 +0300",
    





    
    "snippet": "Software Design PrinciplesSoftware Design principles are a set of guidelines that helps developers to make a good system design.One of the most important principle is SOLID principle.The Key softwa...",
    "content": "Software Design PrinciplesSoftware Design principles are a set of guidelines that helps developers to make a good system design.One of the most important principle is SOLID principle.The Key software design principles are as:SOLIDIt is combination of five basic designing principles.Single Responsibility Principle (SRP)This principle states that there should never be more than one reason for aclass to change. This means that you should design your classes in such a way that each class should have a single purpose.Example - An Account class is responsible for managing  Current and Saving Account but a CurrentAccount and a SavingAccount classes would be responsible for managing current and saving accounts respectively. Hence both are responsible for single purpose only. Hence we are moving towards specialization.Open/Closed Principle (OCP)This principle states that software entities (classes, modules, functions, etc.)should be open for extension but closed for modification. The “closed” part ofthe rule states that once a module has been developed and tested, the codeshould only be changed to correct bugs. The “open” part says that you shouldbe able to extend existing code in order to introduce new functionality.Example – A PaymentGateway base class contains all basic payment related  properties and methods. This class can be extended by different PaymentGateway  classes for different payment gateway vendors to achieve theirs functionalities.  Hence it is open for extension but closed for modification.Liskov Substitution Principle (LSP)This principle states that functions that use pointers or references to baseclasses must be able to use objects of derived classes without knowing it.Example - Assume that you have an inheritance hierarchy with Person and Student. Wherever you can use Person, you should also be able to use a Student, because Student is a subclass of Person.Interface Segregation Principle (ISP)This principle states that Clients should not be forced to depend uponinterfaces that they don’t use. This means the number of members in theinterface that is visible to the dependent class should be minimized.Example - The service interface that is exposed to the client should contains  only client related methods not all.Dependency Inversion Principle (DIP)It states that  High level modules should not depend upon low level modules. Both should dependupon abstractions.  Abstractions should not depend upon details. Details should depend uponabstractions.It helps us to develop loosely couple code by ensuring that high-level modulesdepend on abstractions rather than concrete implementations of lower-level modules.The Dependency Injection pattern is an implementation of this principle.Example- The Dependency Injection pattern is an implementation of this principleDRY (Don’t Repeat Yourself)This principle states that each small pieces of knowledge (code) may onlyoccur exactly once in the entire system. This helps us to write scalable,maintainable and reusable code.If need for repition occurs, create a function and call it repeatedly.Example – Asp.Net MVC framework works on this principle.KISS (Keep it simple, Stupid!)This principle states that try to keep each small piece of software simple andunnecessary complexity should be avoided. This helps us to write easy,maintainable code.YAGNI (You aint gonna need it)This principle states that always implement things when you actually needthem. Never implements things before you need them.console.log('Thank you!');"
  }
  
]

